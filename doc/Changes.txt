This is a brief list of changes I've made to the functionality of the backend as I'm doing my rewrite:

    1. Improved reverse search indexing
        The image signature generation paper has a significant flaw. The main idea of the algorithm
        is that you select a grid of image regions, take an average pixel intensity over those regions,
        and compute the differences between adjacent grid points. These differences form a 'signature'
        of the image. 

        Not all grid points have a full set of neighbors though. When a grid point doesn't have a
        neighbor in some direction, the paper says to treat that difference as 0. This is perfectly
        fine for computing distances as these components won't contribute anything to the distances 
        between signatures. However, these 0'd components matter when performing an indexed search
        in a database of signatures. Since all signatures share these 0'd components, 'words' of the
        signature are much more likely to match random signatures. This results in many more false 
        positives than necessary. 

        By simply not including these 'neighborless' components in the image signatures, we can
        improve the accuracy of the indexed search significantly. This means we spend less time
        comparing obviously dissimilar images when performing a reverse search.

    2. Faster and more thorough reverse search
        Using the intarray Postgres extension enables blazingly fast comparison of image indexes,
        much faster than using unnest. However, this aproach requires reserving a few bits of each
        word for the word index to get the && operator to behave like an element-wise comparison.

        Signature comparison is fast enough that I've removed the limit on the similar signature
        queries. Comparing indexes returns about 10-15% of the images within the database, so 
        reduces the search space by about an order of magnitude. On a test database of 50k images,
        a complete reverse search takes about 80-120ms.

    3. Improved cyclic dependency detection
        The tag creation and update api will detect if an implication or suggestion creates any cyclic
        dependency, not just shallow ones.

    4. Getting around posts now respects sorting

    5. Expanded set of post sort-style tokens

    6. Added has-implication and has-suggestion tag named tokens